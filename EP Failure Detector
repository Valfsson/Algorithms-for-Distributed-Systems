//implementation of Eventually Perfect Failure Detector

//Define EPFD Implementation
class EPFD(epfdInit: Init[EPFD]) extends ComponentDefinition {

  //EPFD subscriptions
  val timer = requires[Timer];
  val pLink = requires[PerfectLink];
  val epfd = provides[EventuallyPerfectFailureDetector];

  // EPDF component state and initialization
  
  //configuration parameters
  val self = epfdInit match {case Init(s: Address) => s};
  val topology = cfg.getValue[List[Address]]("epfd.simulation.topology");
  val delta = cfg.getValue[Long]("epfd.simulation.delay");
  
  //mutable state
  var period = cfg.getValue[Long]("epfd.simulation.delay");
  var alive = Set(cfg.getValue[List[Address]]("epfd.simulation.topology"): _*);
  var suspected = Set[Address]();
  var seqnum = 0;

  def startTimer(delay: Long): Unit = {
    val scheduledTimeout = new ScheduleTimeout(period);
    scheduledTimeout.setTimeoutEvent(CheckTimeout(scheduledTimeout));
    trigger(scheduledTimeout -> timer);
  }

  //EPFD event handlers
  ctrl uponEvent {
    case _: Start =>  {
     startTimer(period);
    }
  }

  timer uponEvent {
    case CheckTimeout(_) =>  {
      if (!alive.intersect(suspected).isEmpty) {
        period= period + delay;        
      }
      
      seqnum = seqnum + 1;      
      for (p <- topology) {
        if (!alive.contains(p) && !suspected.contains(p)) {
            suspected = suspected + p;
            trigger(Suspect(p) -> epfd);
                   
        } else if (alive.contains(p) && suspected.contains(p)) {
          suspected = suspected - p;
          trigger(Restore(p) -> epfd);
        }
        trigger(PL_Send(p, HeartbeatRequest(seqnum)) -> pLink);
      }
      alive = Set[Address]();
      startTimer(period);
    }
   }

  pLink uponEvent {
    case PL_Deliver(src, HeartbeatRequest(seq)) =>  {
      trigger(PL_Send(src, HeartbeatReply(seq)) -> pLink);     
    }
    case PL_Deliver(src, HeartbeatReply(seq)) => {
      if (seq==seqnum || suspected.contains(src)){
          alive=alive + src;
      }
    }
  }
}

