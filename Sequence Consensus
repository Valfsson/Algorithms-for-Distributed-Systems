// Leader-Based Sequence Consensus

import se.sics.kompics.sl._
import se.sics.kompics.network._
import se.kth.edx.id2203.core.Ports.{SequenceConsensus, _}
import se.sics.kompics.KompicsEvent
import se.kth.edx.id2203.validation._

import scala.collection.mutable;

//Provided Primitives to use in your implementation

case class Prepare(nL: Long, ld: Int, na: Long) extends KompicsEvent;
case class Promise(nL: Long, na: Long, suffix: List[RSM_Command], ld: Int) extends KompicsEvent;
case class AcceptSync(nL: Long, suffix: List[RSM_Command], ld: Int) extends KompicsEvent;
case class Accept(nL: Long, c: RSM_Command) extends KompicsEvent;
case class Accepted(nL: Long, m: Int) extends KompicsEvent;
case class Decide(ld: Int, nL: Long) extends KompicsEvent;

object State extends Enumeration {
    type State = Value;
    val PREPARE, ACCEPT, UNKOWN = Value;    //UNKNOWN
}

object Role extends Enumeration {
    type Role = Value;
    val LEADER, FOLLOWER = Value;
}

def suffix(s: List[RSM_Command], l: Int): List[RSM_Command] = {
    s.drop(l)
}
 
def prefix(s: List[RSM_Command], l: Int): List[RSM_Command] = {
    s.take(l)
}
class SequencePaxos(init: Init[SequencePaxos]) extends ComponentDefinition {

import Role._
import State._
    
  val sc = provides[SequenceConsensus];
  val ble = requires[BallotLeaderElection];
  val pl = requires[FIFOPerfectLink];

  val (self, pi, others) = init match {
    case Init(addr: Address, pi: Set[Address] @unchecked) => (addr, pi, pi - addr)
  }
  val majority = (pi.size / 2) + 1;

  var state = (FOLLOWER, UNKOWN);
  var nL = 0l;
  var nProm = 0l;
  var leader: Option[Address] = None;
  var na = 0l;
  var va = List.empty[RSM_Command];
  var ld = 0;
  // leader state
  var propCmds = List.empty[RSM_Command];
  var las = mutable.Map.empty[Address, Int];
  var lds = mutable.Map.empty[Address, Int];
  var lc = 0;
  var acks = mutable.Map.empty[Address, (Long, List[RSM_Command])]; 


  ble uponEvent {
    case BLE_Leader(l, n) => {
        if(n>nL){
            leader=Some(l);
            nL=n;
            if(self==l && nL>nProm){
                state=(LEADER,PREPARE);
                propCmds=List.empty; 
                las= mutable.Map.empty;
                lds=mutable.Map.empty;
                lc=0;
                pi.foreach{ p=> 
                    if(p!=self){
                      trigger (PL_Send(p,Prepare(nL,ld,na)) -> pl );
                    }
                }
                acks(l)=(na,suffix(va,ld));
                lds(self)=ld;
                nProm=nL;
            }
        } else{
            state=(FOLLOWER,UNKOWN)
        }
        
    }
   }
   
      
  pl uponEvent {
    case PL_Deliver(p, Prepare(np, ldp, n)) => {
      if(nProm<np){
          nProm=np;
          state=(FOLLOWER,PREPARE);
         var sfx= List.empty[RSM_Command];
          if(na>=n){
             sfx=suffix(va,ld);
          }
          else{
              sfx= List.empty[RSM_Command]; 
              
          }
         trigger(PL_Send(p, Promise(np,na,sfx,ld))-> pl);
      }
    }
    
    case PL_Deliver(a, Promise(n, na, sfxa, lda)) => {
      if ((n == nL) && (state == (LEADER, PREPARE))) {
        acks(a)=(na,sfxa);
        lds(a)=lda;
        
      val pTemp = pi.filter(p => acks.contains(p)); 
       println(s"PpTemp: $pTemp");
       
       val P = acks.values.count(_._1 >= 0); 
       if(P == majority) {
           // println(s"Leader $self get Promise from majority");
             var (adr, (k, sfx)) = acks.maxBy(_._2._1);
        va=prefix(va,ld)++sfx++propCmds;
        
        las(self)=va.size; 
        propCmds=List.empty;
        state=(LEADER, ACCEPT);


        pi.foreach{ p=> 
                    if ((lds.contains(p)) && (p!=self) ){
                      var sfxP=suffix(va,lds(p));
                      trigger (PL_Send(p,AcceptSync(nL,sfxP,lds(p) )) -> pl ); 
                    }
                }
            }
       
      } else if ((n == nL) && (state == (LEADER, ACCEPT))) {
        lds(a)=lda;
        var sfx=suffix(va,lds(a));
        trigger (PL_Send(a,AcceptSync(nL,sfx,lds(a) )) -> pl ); //ld(a)
        if(lc!=0){
            trigger (PL_Send(a,Decide(ld,nL)) -> pl );
        }
      }
    }
    
    case PL_Deliver(p, AcceptSync(nL, sfx, ldp)) => {
      if ((nProm == nL) && (state == (FOLLOWER, PREPARE))) {
         na=nL;
         va=prefix(va,ld)++sfx;
         trigger (PL_Send(p,Accepted(nL,va.size)) -> pl ); //CHECK size
         state=(FOLLOWER,ACCEPT);
      }
    }
    
    case PL_Deliver(p, Accept(nL, c)) => {
      if ((nProm == nL) && (state == (FOLLOWER, ACCEPT))) {
        va=va++List(c);
         trigger (PL_Send(p,Accepted(nL,va.size)) -> pl );
      }
    }
   
      
    case PL_Deliver(_, Decide(l, nL)) => {
       if(nProm==nL){
           while(ld<l){
              trigger (SC_Decide (va(ld)) ->sc ); 
              ld=ld+1;
           }
       }
    }
    
    case PL_Deliver(a, Accepted(n, m)) => {
      if ((n == nL) && (state == (LEADER, ACCEPT))) {
          las(a)=m;
         val P = las.values.count(_ >= m); 
          if((lc<m ) && (P>=majority) ) { //CHECK
              lc=m;
             
              pi.foreach{p=>
                if(lds.contains(p)){
                    trigger(PL_Send(p,Decide(lc,nL))->pl);
                }
              }
          }
          
      }
      }
    }
    
  sc uponEvent {
    case SC_Propose(c) => {
      if (state == (LEADER, PREPARE)) {
    propCmds=propCmds++List(c);
      } 
      else if (state == (LEADER, ACCEPT)) {
        va=va++ List(c);
        las(self)=las(self)+1;
       
        pi.foreach{p=>
            if((lds.contains(p)) && (p!=self)){
                trigger(PL_Send(p,Accept(nL,c))->pl);
            }
        }
      }
    }
  }
}
